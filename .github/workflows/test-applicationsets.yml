name: Test ApplicationSets

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  # renovate: datasource=github-releases depName=argoproj/argo-cd
  ARGOCD_VERSION: v3.1.1
  # renovate: datasource=github-releases depName=kubernetes/kubernetes
  KUBECTL_VERSION: v1.33.4

jobs:
  test-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Reduced from 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create lightweight kind cluster
      uses: helm/kind-action@v1
      with:
        version: v0.29.0
        kubectl_version: ${{ env.KUBECTL_VERSION }}
        cluster_name: test-cluster
        wait: 180s  # Reduced from 300s
        # Removed custom config - using defaults for faster startup

    - name: Install ArgoCD Core
      run: |
        kubectl create namespace argocd
        
        # Install ArgoCD Core - headless mode without UI/API server
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/${{ env.ARGOCD_VERSION }}/manifests/core-install.yaml
        
        # Wait for essential core components
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-repo-server -n argocd
        kubectl wait --for=jsonpath='{.status.readyReplicas}'=1 --timeout=300s statefulset/argocd-application-controller -n argocd

    - name: Setup ArgoCD CLI and create required secrets
      run: |
        # Download and install CLI
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/download/${{ env.ARGOCD_VERSION }}/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
        
        # Create ArgoCD server secret (required for Core mode)
        SECRETKEY=$(openssl rand -base64 32)
        kubectl create secret generic argocd-secret \
          --from-literal=server.secretkey="$SECRETKEY" \
          -n argocd || true  # Don't fail if already exists
        
        kubectl label secret argocd-secret \
          app.kubernetes.io/name=argocd-secret \
          app.kubernetes.io/part-of=argocd \
          -n argocd || true
        
        # Restart ArgoCD components to pick up the server secret
        kubectl rollout restart deployment/argocd-repo-server -n argocd
        kubectl rollout restart statefulset/argocd-application-controller -n argocd
        
        # Wait for components to be ready
        kubectl rollout status deployment/argocd-repo-server -n argocd --timeout=120s
        kubectl rollout status statefulset/argocd-application-controller -n argocd --timeout=120s
        
        # Configure CLI for core mode (no API server)
        kubectl config set-context --current --namespace=argocd
        argocd login --core
        
        echo "ArgoCD Core setup complete"

    - name: Create local cluster secret manually
      run: |
        # In ArgoCD Core, the local cluster is NOT automatically registered
        # We need to create a cluster secret manually for ApplicationSet cluster generator
        
        # Create cluster secret for local cluster with monitoring label
        kubectl create secret generic test-cluster \
          --from-literal=name=test-cluster \
          --from-literal=server=https://kubernetes.default.svc \
          --from-literal=config='{"tlsClientConfig":{"insecure":true}}' \
          -n argocd
        
        kubectl label secret test-cluster \
          argocd.argoproj.io/secret-type=cluster \
          monitoring=enabled \
          -n argocd
        
        echo "Verifying local cluster secret:"
        kubectl get secret test-cluster -n argocd --show-labels

    - name: Create default AppProject  
      run: |
        # Check if default project exists and update it with upsert flag
        if argocd proj get default >/dev/null 2>&1; then
          echo "Default project exists, updating with upsert..."
          argocd proj create default \
            --description "Default project" \
            --src '*' \
            --dest '*,*' \
            --allow-cluster-resource '*/*' \
            --allow-namespaced-resource '*/*' \
            --upsert
        else
          echo "Creating default project..."
          argocd proj create default \
            --description "Default project" \
            --src '*' \
            --dest '*,*' \
            --allow-cluster-resource '*/*' \
            --allow-namespaced-resource '*/*'
        fi
        
        echo "Verifying AppProject creation:"
        argocd proj list

    - name: Test ApplicationSet
      run: |
        echo "Verifying prerequisites..."
        argocd proj list
        kubectl get secrets -n argocd -l argocd.argoproj.io/secret-type=cluster
        
        echo "Validating ApplicationSet YAML..."
        kubectl apply --dry-run=client -f monitoring/kube-prometheus-stack-with-loki/basic/applicationset.yaml
        
        echo "Applying ApplicationSet..."
        kubectl apply -f monitoring/kube-prometheus-stack-with-loki/basic/applicationset.yaml
        
        kubectl get applicationsets -n argocd
        
        echo "Waiting for ApplicationSet to generate applications..."
        sleep 30
        
        echo "Checking for generated applications:"
        kubectl get applications -n argocd
        
        # Verify application was created
        if kubectl get application test-cluster-monitoring -n argocd &>/dev/null; then
          echo "✅ ApplicationSet successfully generated application"
          kubectl get application test-cluster-monitoring -n argocd -o wide
        else
          echo "❌ ApplicationSet failed to generate application"
          kubectl describe applicationset kube-prometheus-stack -n argocd
          exit 1
        fi

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "ApplicationSets:"
        kubectl get applicationsets -n argocd -o wide
        
        echo "Applications:"
        kubectl get applications -n argocd -o wide
        
        echo "Cluster secrets:"
        kubectl get secrets -n argocd -l argocd.argoproj.io/secret-type=cluster
        
        echo "Application Controller logs (last 20 lines):"
        kubectl logs -n argocd statefulset/argocd-application-controller --tail=20 || true